{
  "createTime": 1742250829558,
  "updateTime": 1742942117648,
  "name": "Interview Agentic Workflow",
  "description": "A workflow that simulates a SWE interview process",
  "version": 1,
  "tasks": [
    {
      "name": "get_start_time",
      "taskReferenceName": "get_start_time_ref",
      "inputParameters": {
        "expression": "(function () {\n  return new Date().toISOString();\n})();\n",
        "evaluatorType": "graaljs"
      },
      "type": "INLINE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "set_variable",
      "taskReferenceName": "set_variable_ref",
      "inputParameters": {
        "messages": [],
        "start_time": "${get_start_time_ref.output.result}",
        "is_initial_step_done": false,
        "is_final_step_done": false,
        "is_first_q_done": false,
        "is_second_q_done": false,
        "is_third_q_done": false,
        "time_out": 45,
        "is_overtime": false,
        "scorecards": []
      },
      "type": "SET_VARIABLE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "welcome_message",
      "taskReferenceName": "welcome_message_ref",
      "inputParameters": {
        "expression": "(function () {\n  return $.messages.concat({ \n    role: \"assistant\", \n    message: \"Welcome to the Software Engineer interview at Orkes! Please state your name and preferred programming language below.\", \n    timestamp: new Date().toISOString() \n  });\n})();",
        "evaluatorType": "graaljs",
        "messages": "${workflow.variables.messages}"
      },
      "type": "INLINE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "set_variable_10",
      "taskReferenceName": "set_variable_ref_10",
      "inputParameters": {
        "messages": "${welcome_message_ref.output.result}"
      },
      "type": "SET_VARIABLE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "do_while_1",
      "taskReferenceName": "do_while_ref_1",
      "inputParameters": {
        "is_initial_step_done": "${workflow.variables.is_initial_step_done}"
      },
      "type": "DO_WHILE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopCondition": "(function () {\n  return !$.is_initial_step_done;\n})();",
      "loopOver": [
        {
          "name": "initial_response",
          "taskReferenceName": "initial_response_ref",
          "inputParameters": {},
          "type": "WAIT",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "name_question_evaluator",
          "taskReferenceName": "name_question_evaluator_ref",
          "inputParameters": {
            "llmProvider": "openai",
            "model": "gpt-4o-mini",
            "promptName": "name_question_evaluator",
            "promptVariables": {
              "response": "${initial_response_ref.output.result.response}"
            }
          },
          "type": "LLM_TEXT_COMPLETE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "concatenate_name_lang_msg",
          "taskReferenceName": "concatenate_name_lang_msg_ref",
          "inputParameters": {
            "expression": "(function () {\n  return {\n    messages: [\n      ...($.messages || []),\n      {\n        role: \"user\",\n        message: $.initialResponse,\n        timestamp: new Date().toISOString()\n      },\n      ...(!$.is_initial_step_done ? [{\n        role: \"assistant\",\n        message: \"You are missing your name or programming language. Please provide both to proceed.\",\n        timestamp: new Date().toISOString()\n      }] : [])\n    ]\n  };\n})();\n",
            "evaluatorType": "graaljs",
            "messages": "${workflow.variables.messages}",
            "initialResponse": "${initial_response_ref.output.result.response}",
            "is_initial_step_done": "${name_question_evaluator_ref.output.result.is_initial_step_done}"
          },
          "type": "INLINE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "set_variable_8",
          "taskReferenceName": "set_variable_ref_8",
          "inputParameters": {
            "is_initial_step_done": "${name_question_evaluator_ref.output.result.is_initial_step_done}",
            "name": "${name_question_evaluator_ref.output.result.name}",
            "language": "${name_question_evaluator_ref.output.result.language}",
            "messages": "${concatenate_name_lang_msg_ref.output.result.messages}"
          },
          "type": "SET_VARIABLE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        }
      ],
      "evaluatorType": "graaljs",
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "email_message",
      "taskReferenceName": "email_message_ref",
      "inputParameters": {
        "expression": "(function () {\n  return {\n    messages: [\n      ...($.messages || []),\n      {\n        role: \"assistant\", \n        message: \"Thank you \" + $.name + \"! We will conduct this interview in \" + $.language + \". Can you please provide us with your email address?\", \n        timestamp: new Date().toISOString() \n      }\n    ]\n  };\n})();\n",
        "evaluatorType": "graaljs",
        "name": "${workflow.variables.name}",
        "language": "${workflow.variables.language}",
        "messages": "${workflow.variables.messages}"
      },
      "type": "INLINE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "set_variable_13",
      "taskReferenceName": "set_variable_ref_13",
      "inputParameters": {
        "messages": "${email_message_ref.output.result.messages}"
      },
      "type": "SET_VARIABLE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "do_while_2",
      "taskReferenceName": "do_while_ref_2",
      "inputParameters": {
        "is_email_valid": "${workflow.variables.is_email_valid}"
      },
      "type": "DO_WHILE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopCondition": "(function () {\n  return !$.is_email_valid;\n})();",
      "loopOver": [
        {
          "name": "email_response",
          "taskReferenceName": "email_response_ref",
          "inputParameters": {},
          "type": "WAIT",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "email_evaluator",
          "taskReferenceName": "email_evaluator_ref",
          "inputParameters": {
            "llmProvider": "openai",
            "model": "gpt-4o-mini",
            "promptName": "email_evaluator",
            "promptVariables": {
              "response": "${email_response_ref.output.result.response}"
            }
          },
          "type": "LLM_TEXT_COMPLETE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "concatenate_email_msg",
          "taskReferenceName": "concatenate_email_msg_ref",
          "inputParameters": {
            "expression": "(function () {\n  return {\n    messages: [\n      ...($.messages || []),\n      {\n        role: \"user\",\n        message: $.email_response,\n        timestamp: new Date().toISOString()\n      },\n      ...(!$.is_email_valid ? [{\n        role: \"assistant\",\n        message: \"Your email address is missing or invalid. Please provide a valid email address to proceed.\",\n        timestamp: new Date().toISOString()\n      }] : [])\n    ]\n  };\n})();",
            "evaluatorType": "graaljs",
            "messages": "${workflow.variables.messages}",
            "email_response": "${email_response_ref.output.result.response}",
            "is_email_valid": "${email_evaluator_ref.output.result.is_email_valid}"
          },
          "type": "INLINE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "set_variable_12",
          "taskReferenceName": "set_variable_ref_12",
          "inputParameters": {
            "is_email_valid": "${email_evaluator_ref.output.result.is_email_valid}",
            "email": "${email_evaluator_ref.output.result.email}",
            "messages": "${concatenate_email_msg_ref.output.result.messages}"
          },
          "type": "SET_VARIABLE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        }
      ],
      "evaluatorType": "graaljs",
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "concatenate_initial_step_msg",
      "taskReferenceName": "concatenate_initial_step_msg_ref",
      "inputParameters": {
        "expression": "(function () {\n  return {\n    messages: [\n      ...($.messages || []),\n      {\n        role: \"assistant\", \n        message: \"Thank you \" + $.name + \"! We will begin with the coding question.\", \n        timestamp: new Date().toISOString() \n      }\n    ]\n  };\n})();\n",
        "evaluatorType": "graaljs",
        "name": "${workflow.variables.name}",
        "messages": "${workflow.variables.messages}"
      },
      "type": "INLINE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "set_variable_14",
      "taskReferenceName": "set_variable_ref_14",
      "inputParameters": {
        "messages": "${concatenate_initial_step_msg_ref.output.result.messages}"
      },
      "type": "SET_VARIABLE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "interview_loop",
      "taskReferenceName": "interview_loop_ref",
      "inputParameters": {
        "number": 3,
        "start_time": "${workflow.variables.start_time}",
        "time_out": "${workflow.variables.time_out}"
      },
      "type": "DO_WHILE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopCondition": "(function () {\n  const startTime = new Date($.start_time);\n  const newTime = new Date();\n  const minElapsed = (newTime - startTime) / (1000 * 60); // Convert millisec to min\n\n  return (\n    $.interview_loop_ref['iteration'] < $.number && minElapsed <= $.time_out\n  );\n})();\n",
      "loopOver": [
        {
          "name": "switch",
          "taskReferenceName": "switch_ref",
          "inputParameters": {
            "iteration": "${interview_loop_ref.output.iteration}"
          },
          "type": "SWITCH",
          "decisionCases": {
            "1": [
              {
                "name": "sub_1st_question_workflow",
                "taskReferenceName": "sub_1st_question_workflow_ref",
                "inputParameters": {
                  "startWorkflow": {
                    "name": "Core Interview Loop",
                    "input": {
                      "name": "${workflow.variables.name}",
                      "language": "${workflow.variables.language}",
                      "start_time": "${workflow.variables.start_time}",
                      "question_template": "interview_question_generator",
                      "time_out": "${workflow.variables.time_out}"
                    },
                    "version": 1
                  }
                },
                "type": "START_WORKFLOW",
                "decisionCases": {},
                "defaultCase": [],
                "forkTasks": [],
                "startDelay": 0,
                "joinOn": [],
                "optional": false,
                "defaultExclusiveJoinTask": [],
                "asyncComplete": false,
                "loopOver": [],
                "onStateChange": {},
                "permissive": false
              },
              {
                "name": "set_q1_workflow_id",
                "taskReferenceName": "set_q1_workflow_id_ref",
                "inputParameters": {
                  "sub_workflow_id": "${sub_1st_question_workflow_ref.output.workflowId}",
                  "is_first_q_done": true
                },
                "type": "SET_VARIABLE",
                "decisionCases": {},
                "defaultCase": [],
                "forkTasks": [],
                "startDelay": 0,
                "joinOn": [],
                "optional": false,
                "defaultExclusiveJoinTask": [],
                "asyncComplete": false,
                "loopOver": [],
                "onStateChange": {},
                "permissive": false
              }
            ],
            "2": [
              {
                "name": "sub_2nd_question_workflow",
                "taskReferenceName": "sub_2nd_question_workflow_ref",
                "inputParameters": {
                  "startWorkflow": {
                    "name": "Core Interview Loop",
                    "input": {
                      "name": "${workflow.variables.name}",
                      "language": "${workflow.variables.language}",
                      "start_time": "${workflow.variables.start_time}",
                      "question_template": "interview_question2_generator",
                      "time_out": "${workflow.variables.time_out}"
                    },
                    "version": 1
                  }
                },
                "type": "START_WORKFLOW",
                "decisionCases": {},
                "defaultCase": [],
                "forkTasks": [],
                "startDelay": 0,
                "joinOn": [],
                "optional": false,
                "defaultExclusiveJoinTask": [],
                "asyncComplete": false,
                "loopOver": [],
                "onStateChange": {},
                "permissive": false
              },
              {
                "name": "set_q2_workflow_id",
                "taskReferenceName": "set_q2_workflow_id_ref",
                "inputParameters": {
                  "sub_workflow_id": "${sub_2nd_question_workflow_ref.output.workflowId}",
                  "is_second_q_done": true
                },
                "type": "SET_VARIABLE",
                "decisionCases": {},
                "defaultCase": [],
                "forkTasks": [],
                "startDelay": 0,
                "joinOn": [],
                "optional": false,
                "defaultExclusiveJoinTask": [],
                "asyncComplete": false,
                "loopOver": [],
                "onStateChange": {},
                "permissive": false
              }
            ],
            "3": [
              {
                "name": "sub_3rd_question_workflow",
                "taskReferenceName": "sub_3rd_question_workflow_ref",
                "inputParameters": {
                  "startWorkflow": {
                    "name": "Core Interview Loop",
                    "input": {
                      "name": "${workflow.variables.name}",
                      "language": "${workflow.variables.language}",
                      "start_time": "${workflow.variables.start_time}",
                      "question_template": "interview_question3_generator",
                      "time_out": "${workflow.variables.time_out}"
                    },
                    "version": 1
                  }
                },
                "type": "START_WORKFLOW",
                "decisionCases": {},
                "defaultCase": [],
                "forkTasks": [],
                "startDelay": 0,
                "joinOn": [],
                "optional": false,
                "defaultExclusiveJoinTask": [],
                "asyncComplete": false,
                "loopOver": [],
                "onStateChange": {},
                "permissive": false
              },
              {
                "name": "set_q3_workflow_id",
                "taskReferenceName": "set_q3_workflow_id_ref",
                "inputParameters": {
                  "sub_workflow_id": "${sub_3rd_question_workflow_ref.output.workflowId}",
                  "is_third_q_done": true
                },
                "type": "SET_VARIABLE",
                "decisionCases": {},
                "defaultCase": [],
                "forkTasks": [],
                "startDelay": 0,
                "joinOn": [],
                "optional": false,
                "defaultExclusiveJoinTask": [],
                "asyncComplete": false,
                "loopOver": [],
                "onStateChange": {},
                "permissive": false
              }
            ]
          },
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "evaluatorType": "value-param",
          "expression": "iteration",
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "wait_till_question_done",
          "taskReferenceName": "wait_till_question_done_ref",
          "inputParameters": {},
          "type": "WAIT",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "concatenate_loop_messages",
          "taskReferenceName": "concatenate_loop_messages_ref",
          "inputParameters": {
            "expression": "(function () {\n  return {\n    messages: [\n      ...($.messages || []), \n      ...($.newMessages || [])\n    ]\n  };\n})();",
            "evaluatorType": "graaljs",
            "messages": "${workflow.variables.messages}",
            "newMessages": "${wait_till_question_done_ref.output.result.messages}"
          },
          "type": "INLINE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "concatenate_scorecard",
          "taskReferenceName": "concatenate_scorecard_ref",
          "inputParameters": {
            "expression": "(function () {\n  return {\n    scorecards: [...$.scorecards, $.newScorecard]\n  };\n})();",
            "evaluatorType": "graaljs",
            "scorecards": "${workflow.variables.scorecards}",
            "newScorecard": "${wait_till_question_done_ref.output.result.scorecard}"
          },
          "type": "INLINE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "set_messages_question",
          "taskReferenceName": "set_messages_question_ref",
          "inputParameters": {
            "messages": "${concatenate_loop_messages_ref.output.result.messages}",
            "is_overtime": "${wait_till_question_done_ref.output.result.is_overtime}",
            "scorecards": "${concatenate_scorecard_ref.output.result.scorecards}"
          },
          "type": "SET_VARIABLE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        }
      ],
      "evaluatorType": "graaljs",
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "add_terminate_msg",
      "taskReferenceName": "add_terminate_msg_ref",
      "inputParameters": {
        "is_first_q_done": "${workflow.variables.is_first_q_done}",
        "is_second_q_done": "${workflow.variables.is_second_q_done}",
        "is_third_q_done": "${workflow.variables.is_third_q_done}",
        "is_overtime": "${workflow.variables.is_overtime}"
      },
      "type": "SWITCH",
      "decisionCases": {
        "true": [
          {
            "name": "concatenate_interview_done_msg",
            "taskReferenceName": "concatenate_interview_done_msg_ref",
            "inputParameters": {
              "expression": "(function () {\n  return {\n    messages: [\n      ...($.messages || []),\n      {\n        role: \"assistant\", \n        message: \"Congratulations \" + $.name + \", you have solved the coding challenge. The interview is now complete, thank you for your time. We will be in contact shortly.\", \n        timestamp: new Date().toISOString() \n      }\n    ]\n  };\n})();",
              "evaluatorType": "graaljs",
              "messages": "${workflow.variables.messages}",
              "name": "${workflow.variables.name}"
            },
            "type": "INLINE",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          },
          {
            "name": "set_variable_1",
            "taskReferenceName": "set_variable_ref_1",
            "inputParameters": {
              "messages": "${concatenate_interview_done_msg_ref.output.result.messages}"
            },
            "type": "SET_VARIABLE",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          }
        ]
      },
      "defaultCase": [
        {
          "name": "concatenate_terminate_msg",
          "taskReferenceName": "concatenate_terminate_msg_ref",
          "inputParameters": {
            "expression": "(function () {\n  return {\n    messages: [\n      ...($.messages || []),\n      {\n        role: \"assistant\",\n        message: \"The interview is now complete, thank you for your time \" + $.name + \". We will be in contact shortly.\",\n        timestamp: new Date().toISOString()\n      }\n    ]\n  };\n})();",
            "evaluatorType": "graaljs",
            "messages": "${workflow.variables.messages}",
            "name": "${workflow.variables.name}"
          },
          "type": "INLINE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        },
        {
          "name": "set_variable_8",
          "taskReferenceName": "set_variable_8_ref",
          "inputParameters": {
            "messages": "${concatenate_terminate_msg_ref.output.result.messages}"
          },
          "type": "SET_VARIABLE",
          "decisionCases": {},
          "defaultCase": [],
          "forkTasks": [],
          "startDelay": 0,
          "joinOn": [],
          "optional": false,
          "defaultExclusiveJoinTask": [],
          "asyncComplete": false,
          "loopOver": [],
          "onStateChange": {},
          "permissive": false
        }
      ],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "evaluatorType": "graaljs",
      "expression": "(function () {\n    const total_completion = $.is_first_q_done && $.is_second_q_done && $.is_third_q_done && !$.is_overtime\n    switch (total_completion) {\n      case true:\n        return true;\n      default:\n        return false;\n    }\n  }())",
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "fork",
      "taskReferenceName": "fork_ref",
      "inputParameters": {},
      "type": "FORK_JOIN",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [
        [
          {
            "name": "transcript_formatter",
            "taskReferenceName": "transcript_formatter_ref",
            "inputParameters": {
              "expression": "(function () {\n  return $.messages.map(msg => ({\n    ...msg,\n    role: msg.role === 'assistant' ? 'INTERVIEWER' : 'CANDIDATE',\n    timestamp: new Date(msg.timestamp).toLocaleString(\"en-US\", { timeZone: \"America/Los_Angeles\" })\n  }));\n})();\n",
              "evaluatorType": "graaljs",
              "messages": "${workflow.variables.messages}"
            },
            "type": "INLINE",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          },
          {
            "name": "storeInterviewTranscript",
            "taskReferenceName": "storeInterviewTranscript_ref",
            "inputParameters": {
              "messages": "${transcript_formatter_ref.output.result}",
              "name": "${workflow.variables.name}",
              "email": "${workflow.variables.email}"
            },
            "type": "SIMPLE",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          }
        ],
        [
          {
            "name": "create_scorecard_summary",
            "taskReferenceName": "create_scorecard_summary_ref",
            "inputParameters": {
              "expression": "(function () {\n  return (function () {\n    if (!$.scorecards.length) return \"No scorecards available.\";\n\n    const categories = [\"code_quality\", \"edge_cases\", \"correctness\", \"efficiency\", \"problem_solving\", \"communication\", \"total_score\"];\n    \n    // Calculate averages\n    const totals = {};\n    categories.forEach(function(cat) { totals[cat] = 0; });\n    \n    let highestScore = -Infinity, lowestScore = Infinity;\n    \n    $.scorecards.forEach(function(scorecard) {\n      categories.forEach(function(cat) { totals[cat] += scorecard[cat]; });\n      highestScore = Math.max(highestScore, scorecard.total_score);\n      lowestScore = Math.min(lowestScore, scorecard.total_score);\n    });\n\n    const averages = {};\n    categories.forEach(function(cat) { averages[cat] = (totals[cat] / $.scorecards.length).toFixed(1); });\n\n    // Extract common feedback themes\n    const comments = $.scorecards.map(function(s) { return s.comments; }).join(\" \");\n    \n    const strengths = [];\n    if (averages.code_quality >= 4.5) strengths.push(\"✅ Clean and well-structured code.\");\n    if (averages.correctness >= 4.5) strengths.push(\"✅ Correct solutions.\");\n    if (averages.efficiency >= 4.5) strengths.push(\"✅ Efficient implementations.\");\n    if (averages.problem_solving >= 4.5) strengths.push(\"✅ Strong problem-solving skills.\");\n\n    const improvements = [];\n    if (comments.match(/edge cases/i)) improvements.push(\"🔹 More detailed discussion on edge cases.\");\n    if (comments.match(/efficiency|optimize/i)) improvements.push(\"🔹 Further efficiency optimizations.\");\n    if (averages.code_quality < 3.5) improvements.push(\"🔹 Poor code quality.\");\n    if (averages.correctness < 3.5) improvements.push(\"🔹 Code is mostly incorrect.\");\n    if (averages.communication < 4.5) improvements.push(\"🔹 More elaboration when explaining the approach.\");\n\n    // Generate summary using string concatenation and HTML formatting\n    var summary = \"\";\n    summary += \"<h4><strong>Interview Evaluation Summary</strong></h4>\\n\";\n    summary += \"<h4><strong>Average Scores:</strong></h4>\\n\";\n    summary += \"<ul>\";\n    summary += \"<li>Code Quality: <strong>\" + averages.code_quality + \"</strong></li>\\n\";\n    summary += \"<li>Edge Cases: <strong>\" + averages.edge_cases + \"</strong></li>\\n\";\n    summary += \"<li>Correctness: <strong>\" + averages.correctness + \"</strong></li>\\n\";\n    summary += \"<li>Efficiency: <strong>\" + averages.efficiency + \"</strong></li>\\n\";\n    summary += \"<li>Problem-Solving: <strong>\" + averages.problem_solving + \"</strong></li>\\n\";\n    summary += \"<li>Communication: <strong>\" + averages.communication + \"</strong></li>\\n\";\n    summary += \"<li>Total Score (Avg out of 30): <strong>\" + averages.total_score + \"</strong></li>\\n\";\n    summary += \"</ul>\";\n    summary += \"<ul>\";\n    summary += \"<li><strong>Highest Score:</strong> <strong>\" + highestScore + \"</strong></li>\\n\";\n    summary += \"<li><strong>Lowest Score:</strong> <strong>\" + lowestScore + \"</strong></li>\\n\";\n    summary += \"</ul>\";\n    summary += \"<h4><strong>Key Strengths:</strong></h4>\\n\";\n    summary += \"<ul>\";\n    summary += (strengths.length ? strengths.map(function(strength) { return \"<li>\" + strength + \"</li>\"; }).join(\"\") : \"<li>✅ No major strengths identified.</li>\");\n    summary += \"</ul>\";\n    summary += \"<h4><strong>Areas for Improvement:</strong></h4>\\n\";\n    summary += \"<ul>\";\n    summary += (improvements.length ? improvements.map(function(improvement) { return \"<li>\" + improvement + \"</li>\"; }).join(\"\") : \"<li>🔹 No major improvements needed.</li>\");\n    summary += \"</ul>\";\n\n    return summary;\n  })();\n})();\n",
              "evaluatorType": "graaljs",
              "scorecards": "${workflow.variables.scorecards}"
            },
            "type": "INLINE",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          },
          {
            "name": "interview_thank_you_email_generator",
            "taskReferenceName": "interview_thank_you_email_generator_ref",
            "inputParameters": {
              "llmProvider": "openai",
              "model": "gpt-4o-mini",
              "instructions": "interview_thank_you_email_generator",
              "promptVariables": {
                "name": "${workflow.variables.name}",
                "messages": "${workflow.variables.messages}"
              },
              "messages": "${workflow.variables.messages}"
            },
            "type": "LLM_CHAT_COMPLETE",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          },
          {
            "name": "embed_summary_in_email",
            "taskReferenceName": "embed_summary_in_email_ref",
            "inputParameters": {
              "expression": "(function () {\n  return $.ty_email.replace(\n    /<p>Best regards,<\\/p>/,\n    `<p>` + $.summary + `</p>\\n  <p>Best regards,</p>`\n  );\n})();",
              "evaluatorType": "graaljs",
              "ty_email": "${interview_thank_you_email_generator_ref.output.result}",
              "summary": "${create_scorecard_summary_ref.output.result}"
            },
            "type": "INLINE",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          },
          {
            "name": "send_thank_you_email",
            "taskReferenceName": "send_thank_you_email_ref",
            "inputParameters": {
              "uri": "https://api.sendgrid.com/v3/mail/send",
              "method": "POST",
              "accept": "application/json",
              "contentType": "application/json",
              "encode": true,
              "headers": {
                "Authorization": "Bearer ${workflow.env.sendgrid_api_key}"
              },
              "body": {
                "personalizations": [
                  {
                    "to": [
                      {
                        "email": "${email_evaluator_ref.output.result.email}"
                      }
                    ]
                  }
                ],
                "from": {
                  "email": "<SENDGRID_VERIFIED_SENDER_EMAIL>"
                },
                "subject": "Thank you ${workflow.variables.name} for interviewing with Orkes",
                "content": [
                  {
                    "type": "text/html",
                    "value": "${embed_summary_in_email_ref.output.result}"
                  }
                ]
              }
            },
            "type": "HTTP",
            "decisionCases": {},
            "defaultCase": [],
            "forkTasks": [],
            "startDelay": 0,
            "joinOn": [],
            "optional": false,
            "defaultExclusiveJoinTask": [],
            "asyncComplete": false,
            "loopOver": [],
            "onStateChange": {},
            "permissive": false
          }
        ]
      ],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "join",
      "taskReferenceName": "join_ref",
      "inputParameters": {},
      "type": "JOIN",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [
        "send_thank_you_email_ref",
        "storeInterviewTranscript_ref"
      ],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    },
    {
      "name": "set_variable_11",
      "taskReferenceName": "set_variable_ref_11",
      "inputParameters": {
        "is_final_step_done": true
      },
      "type": "SET_VARIABLE",
      "decisionCases": {},
      "defaultCase": [],
      "forkTasks": [],
      "startDelay": 0,
      "joinOn": [],
      "optional": false,
      "defaultExclusiveJoinTask": [],
      "asyncComplete": false,
      "loopOver": [],
      "onStateChange": {},
      "permissive": false
    }
  ],
  "inputParameters": [],
  "outputParameters": {},
  "failureWorkflow": "",
  "schemaVersion": 2,
  "restartable": true,
  "workflowStatusListenerEnabled": false,
  "timeoutPolicy": "ALERT_ONLY",
  "timeoutSeconds": 0,
  "variables": {},
  "inputTemplate": {},
  "enforceSchema": true
}